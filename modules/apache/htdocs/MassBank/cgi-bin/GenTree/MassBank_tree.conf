#-------------------------------------------------------------------------------
#
# Copyright (C) 2008 JST-BIRD MassBank
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#===============================================================================
#
# [Admin Tool] TREE.sqlファイル生成 - 詳細設定
#
# ver 1.0.8  2008.12.05
#
#-------------------------------------------------------------------------------
use Switch;

@Tag = (
	['RECORD_TITLE', 'CH$EXACT_MASS', 'CH$FORMULA',
	 'RECORD_TITLE', 'MS$FOCUSED_ION', 'AC$ANALYTICAL_CONDITION']
	);

@GetProc = ('&GetProc1');
@OutProc = ('&OutProc1');
local($title, $mstype);

sub GetProc1() { local($pos, $data) = @_;
	# ms type
	if( $pos == 0 ) {
		$mstype = '';
		$title = $data;
		local(@titles) = split( /; /, $data);
		for $i ( 0 .. $#titles ) {
			switch ($titles[$i]) {
				case 'QqQ'           { $mstype = 'QqQ-MS';         }	# for Keio, Waters
				case 'QqTOF'         { $mstype = 'QqTOF-MS';       }	# for Keio
				case 'IT'            { $mstype = 'IT-MS';          }	# for Keio
				case 'LC-Q/MS'       { $mstype = 'LC-Q-MS';        }	# for Waters
				case 'FAB CID-MS/MS' { $mstype = 'FAB-MS/MS';      }	# for Kyoto
				case 'QqIT'          { $mstype = 'QqIT-MS';        }	# for Tokyo
				case 'Orbitrap'      { $mstype = 'LC-Orbitrap-MS'; }	# for Tokyo
				case 'CE-TOF/MS'     { $mstype = 'CE-TOF-MS';      }	# for RIKEN
				case 'GC-TOF/MS'     { $mstype = 'GC-TOF-MS';      }	# for RIKEN
				case 'LC-TOF/MS'     { $mstype = 'LC-TOF-MS';      }	# for RIKEN
				case 'LC-MS/MS'      {
					if ( $titles[$i+1] eq 'QqQ' ) {
						$mstype = 'LC-QqQ-MS';
					}
					elsif ( $titles[$i+1] eq 'Q-TOF' ) {
						$mstype = 'LC-QTOF-MS';
					}
				}
				else {}
			}
			if ( $mstype ne '' ) {
				@ms = split( '-', $mstype );
				switch ( $ms[0]) {
					case ['LC','CE'] { $inst_type = "$ms[0]-ESI-$ms[1]-$ms[2]"; }
					case 'GC'        { $inst_type = "$ms[0]-EI-$ms[1]-$ms[2]";  }
					case 'FAB'       { $inst_type = $mstype;                    }
					else             { $inst_type = 'ESI-' . $mstype;           }
				}
				return $inst_type;
			}
		}
		return $titles[$#titles];
	}
	# integer mass weight
	elsif ( $pos == 1 ) {
		local($mw0) = int($data + 0.5);
		return $mw0;
	}
	# compound name
	elsif ( $pos == 3 ) {
		local($name) = ($data =~ /^([^;]*);/);
		return $name;
	}
	elsif ( $pos == 4 ) {
		my $ret ='';
		local($tag, $val) = ($data =~ /^([^ ]*) (.*)$/);
		# DERIVATIVE_TYPE
		if ( $mstype eq 'GC-TOF-MS' ) {
			if ( $tag eq 'DERIVATIVE_TYPE' ) {
				$ret = $val;
			}
		}
		elsif ( $mstype eq 'LC-QqQ-MS' || $mstype eq 'LC-QTOF-MS' ) {
			$ret = '';
		}
		# PRECURSOR_TYPE
		else {
			if ( $tag eq 'PRECURSOR_TYPE' || $tag eq 'ION_TYPE' ) {
				$ret = $val;
			}
		}
		return $ret;
	}
	elsif ( $pos == 5 ) {
		my $ret ='';
			$isFound = true;
		if ( $mstype eq 'IT-MS' || $mstype eq 'LC-Orbitrap-MS' ) {
			# PRECURSOR_M/Z
			local($type, $info) = ($title =~ /^[^;]*; ([^;]*); [^;]*; ([^;]*);/);
			$ret = "$type $info";
		}
		elsif ( $mstype eq 'FAB-MS/MS' ) {
			# PRECURSOR_M/Z
			local($info) = ($title =~ /^[^;]*; [^;]*; ([^;]*);/);
			$ret = "MS/MS $info";
		}
		else {
			local($tag, $val) = ($data =~ /^([^ ]*) (.*)$/);
			# COLLISION_ENERGY (L6)
			if (  ($mstype eq 'QqQ-MS' || $mstype eq 'QqTOF-MS' || $mstype eq 'QqIT-MS'
				  || $mstype eq 'LC-QqQ-MS' || $mstype eq 'LC-QTOF-MS')
				  && $tag eq 'COLLISION_ENERGY' ) {
				if ( $mstype eq 'LC-QTOF-MS' ) {
					local($ion) = ($title =~ /^[^;]*; [^;]*; [^;]*; [^;]*; ([^;]*)/);
					$ret = "MS/MS $val; $ion";
				}
				else {
					$ret = "MS/MS $val";
				}
			}
			# RETENTION_TIME or MIGRATION_TIME (L5)
			elsif ( ($mstype eq 'LC-TOF-MS' && $tag eq 'RETENTION_TIME')
					 || ($mstype eq 'CE-TOF-MS' && $tag eq 'MIGRATION_TIME') ) {
				$ret = $val;
			}
			# SAMPLING_CONE (L5)
			elsif ( $mstype eq 'LC-Q-MS' && $tag eq 'SAMPLING_CONE' ) {
				local($mode) = ($title =~ /^[^;]*; [^;]*; ([^;]*);/);
				$ret = "$mode\t$val";
			}
			else {
				if ( $mstype eq '' || ($mstype eq 'LC-TOF-MS' && $tag eq 'SPECTRUM_TYPE') ) {
					$ret = '---';
				}
				else {
					$isFound = false;
					$ret = '';
				}
			}
		}
		return $ret;
	}
	else { # otherwise
		return $data;
	}
}

sub OutProc1() { local($pos, $data) = @_;
	if ( 1 == $pos ) { # mass weight
		return "MW $data";
	}
	else { # otherwise
		return $data;
	}
}

1;
